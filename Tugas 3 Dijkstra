from itertools import permutations

class WeightedGraph :
    
    def _init_(self):
        self.dataKota = {}

    def printGraph(self):
        for kota in self.dataKota:
            print(kota, ":", self.dataKota[kota])

            for tetangga, jarak in self.dataKota[kota].items():
                print("    ->", tetangga, ":", jarak)

    def tambahkanKota(self, kota):
        if kota not in self.dataKota:
            self.dataKota[kota] = {}
            return True
        return False

    def hapusKota(self, kotaDihapus):
        if kotaDihapus in self.dataKota:
            del self.dataKota[kotaDihapus]
            for kota in self.dataKota:
                if kotaDihapus in self.dataKota[kota]:
                    del self.dataKota[kota][kotaDihapus]
            return True
        return False

    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.dataKota and kota2 in self.dataKota:
            self.dataKota[kota1][kota2] = jarak
            self.dataKota[kota2][kota1] = jarak
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.dataKota and kota2 in self.dataKota:
            if kota2 in self.dataKota[kota1]:
                del self.dataKota[kota1][kota2]
                del self.dataKota[kota2][kota1]
                return True
        return False

    def dijkstra(self, source):
        jarak = {}
        for kota in self.dataKota:
            jarak[kota] = float('inf')

        jarak[source] = 0

        kotaBelumDikunjungi = list(self.dataKota.keys())

        while kotaBelumDikunjungi:
            jarakTerpendek = float('inf')
            kotaTerdekat = None
            for kota in kotaBelumDikunjungi:
                if jarak[kota] < jarakTerpendek:
                    jarakTerpendek = jarak[kota]
                    kotaTerdekat = kota

            kotaBelumDikunjungi.remove(kotaTerdekat)

